package com.osi.finx.model;
// Generated 08 16, 18 6:39:07 PM by Hibernate Tools 5.2.3.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * QxmaFtWallet generated by hbm2java
 */
@Entity
@Table(name = "qxma_ft_wallet", catalog = "finx_db")
public class QxmaFtWallet implements java.io.Serializable {

	private long walletId;
	private QxmaFtCurrencies qxmaFtCurrencies;
	private QxmaFtParties qxmaFtParties;
	private QxmaFtWalletType qxmaFtWalletType;
	private BigDecimal amount;
	private BigDecimal creditLimit;
	private BigDecimal maxLimit;
	private Short status;
	private Long createdBy;
	private Date createdAt;
	private Long updatedBy;
	private Date updatedAt;
	private Set<QxmaFtWalletLog> qxmaFtWalletLogs = new HashSet<QxmaFtWalletLog>(0);
	private Set<QxmaFtTransfer> qxmaFtTransfersForToWalletId = new HashSet<QxmaFtTransfer>(0);
	private Set<QxmaFtTransfer> qxmaFtTransfersForFromWalletId = new HashSet<QxmaFtTransfer>(0);

	public QxmaFtWallet() {
	}

	public QxmaFtWallet(long walletId, QxmaFtCurrencies qxmaFtCurrencies, QxmaFtParties qxmaFtParties,
			QxmaFtWalletType qxmaFtWalletType) {
		this.walletId = walletId;
		this.qxmaFtCurrencies = qxmaFtCurrencies;
		this.qxmaFtParties = qxmaFtParties;
		this.qxmaFtWalletType = qxmaFtWalletType;
	}

	public QxmaFtWallet(long walletId, QxmaFtCurrencies qxmaFtCurrencies, QxmaFtParties qxmaFtParties,
			QxmaFtWalletType qxmaFtWalletType, BigDecimal amount, BigDecimal creditLimit, BigDecimal maxLimit,
			Short status, Long createdBy, Date createdAt, Long updatedBy, Date updatedAt,
			Set<QxmaFtWalletLog> qxmaFtWalletLogs, Set<QxmaFtTransfer> qxmaFtTransfersForToWalletId,
			Set<QxmaFtTransfer> qxmaFtTransfersForFromWalletId) {
		this.walletId = walletId;
		this.qxmaFtCurrencies = qxmaFtCurrencies;
		this.qxmaFtParties = qxmaFtParties;
		this.qxmaFtWalletType = qxmaFtWalletType;
		this.amount = amount;
		this.creditLimit = creditLimit;
		this.maxLimit = maxLimit;
		this.status = status;
		this.createdBy = createdBy;
		this.createdAt = createdAt;
		this.updatedBy = updatedBy;
		this.updatedAt = updatedAt;
		this.qxmaFtWalletLogs = qxmaFtWalletLogs;
		this.qxmaFtTransfersForToWalletId = qxmaFtTransfersForToWalletId;
		this.qxmaFtTransfersForFromWalletId = qxmaFtTransfersForFromWalletId;
	}

	@Id

	@Column(name = "wallet_id", unique = true, nullable = false)
	public long getWalletId() {
		return this.walletId;
	}

	public void setWalletId(long walletId) {
		this.walletId = walletId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "currency_id", nullable = false)
	public QxmaFtCurrencies getQxmaFtCurrencies() {
		return this.qxmaFtCurrencies;
	}

	public void setQxmaFtCurrencies(QxmaFtCurrencies qxmaFtCurrencies) {
		this.qxmaFtCurrencies = qxmaFtCurrencies;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parties_id", nullable = false)
	public QxmaFtParties getQxmaFtParties() {
		return this.qxmaFtParties;
	}

	public void setQxmaFtParties(QxmaFtParties qxmaFtParties) {
		this.qxmaFtParties = qxmaFtParties;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "wt_id", nullable = false)
	public QxmaFtWalletType getQxmaFtWalletType() {
		return this.qxmaFtWalletType;
	}

	public void setQxmaFtWalletType(QxmaFtWalletType qxmaFtWalletType) {
		this.qxmaFtWalletType = qxmaFtWalletType;
	}

	@Column(name = "amount")
	public BigDecimal getAmount() {
		return this.amount;
	}

	public void setAmount(BigDecimal amount) {
		this.amount = amount;
	}

	@Column(name = "credit_limit")
	public BigDecimal getCreditLimit() {
		return this.creditLimit;
	}

	public void setCreditLimit(BigDecimal creditLimit) {
		this.creditLimit = creditLimit;
	}

	@Column(name = "max_limit")
	public BigDecimal getMaxLimit() {
		return this.maxLimit;
	}

	public void setMaxLimit(BigDecimal maxLimit) {
		this.maxLimit = maxLimit;
	}

	@Column(name = "status")
	public Short getStatus() {
		return this.status;
	}

	public void setStatus(Short status) {
		this.status = status;
	}

	@Column(name = "created_by")
	public Long getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Long createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", length = 19)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Column(name = "updated_by")
	public Long getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(Long updatedBy) {
		this.updatedBy = updatedBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", length = 19)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "qxmaFtWallet")
	public Set<QxmaFtWalletLog> getQxmaFtWalletLogs() {
		return this.qxmaFtWalletLogs;
	}

	public void setQxmaFtWalletLogs(Set<QxmaFtWalletLog> qxmaFtWalletLogs) {
		this.qxmaFtWalletLogs = qxmaFtWalletLogs;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "qxmaFtWalletByToWalletId")
	public Set<QxmaFtTransfer> getQxmaFtTransfersForToWalletId() {
		return this.qxmaFtTransfersForToWalletId;
	}

	public void setQxmaFtTransfersForToWalletId(Set<QxmaFtTransfer> qxmaFtTransfersForToWalletId) {
		this.qxmaFtTransfersForToWalletId = qxmaFtTransfersForToWalletId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "qxmaFtWalletByFromWalletId")
	public Set<QxmaFtTransfer> getQxmaFtTransfersForFromWalletId() {
		return this.qxmaFtTransfersForFromWalletId;
	}

	public void setQxmaFtTransfersForFromWalletId(Set<QxmaFtTransfer> qxmaFtTransfersForFromWalletId) {
		this.qxmaFtTransfersForFromWalletId = qxmaFtTransfersForFromWalletId;
	}

}
